### 1 Администратор имеет возможность добавлять новые программы
POST http://localhost:8080/programmes
Content-Type: application/x-www-form-urlencoded

name = fitness
duration = 11.11.2021
level_of_training = 0

> {%
client.test("Администратор имеет возможность добавлять новые программы", function (){
    client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
    client.assert(response.contentType.mimeType === "application/json", "Было получено '" +
         response.contentType.mimeType + "', ожидалось 'application/json'.");
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1,
         "Ожидался 1 элемент. " +
         "Было получено " + response.body.length + " элементов"); // mb error, length
     client.assert(response.body[0]["id"] === 10, "Ожидался id книги '10'. Было получено '" +
         response.body[0]["id"] + "'.");
});
 %}

### 2 Админ смотрит окончание льгот: id
GET http://localhost:8080/benefit_pass?customer_id=5

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: ФИО
GET http://localhost:8080/benefit_pass?full_name=Петушкова Мария Васильевна

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: пол. ЭТО НЕ РАБОТАЕТ. ВЫВОДИТ НУЛЫ
GET http://localhost:8080/benefit_pass?sex=ж

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: день рождения
GET http://localhost:8080/benefit_pass?birthdate=23.05.1950

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: телефон. НЕ РАБОТАЕТ. ВЫВОДИТ НУЛЫ
GET http://localhost:8080/benefit_pass?phone=+75195623247

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: паспорт
GET http://localhost:8080/benefit_pass?passport=22 10 632548

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: тип льготы
GET http://localhost:8080/benefit_pass?type_benefit=Пенсионный

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: номер документа льготы
GET http://localhost:8080/benefit_pass?number_document=561658435133482

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 2 Админ смотрит окончание льгот: срок окончания льготы. ВЫВОДИТ НУЛЫ
GET http://localhost:8080/benefit_pass?end=

> {%
client.test("Администратор имеет возможность отслеживать срок окончания действия льгот у пользователей", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 5, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Петушкова Мария Васильевна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "23.05.1950", "День рождения клиента некорректно");
     client.assert(response.body[0]['phone'] === "+75195623247", "Номер клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 10 632548", "Паспорт клиента некорректен");
     client.assert(response.body[0]['benefit'] !== undefined, "Нет данных о льготе");
     client.assert(response.body[0]['benefit']['type_benefit'] === "Пенсионный", "Тип льготы некорректен");
     client.assert(response.body[0]['benefit']['number_document'] === "561658435133482", "Срок льготы некорректен");
     client.assert(response.body[0]['benefit']['end'] === "", "Окончание льготы некорректно");
});
 %}

### 3 Клиент может узнать уровень сложности программ
GET http://localhost:8080/programmes?id_programme=1

> {%
 client.test("Клиент может узнать уровень сложности программ", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['id_programme'] === 1, "id программы некорректен");
     client.assert(response.body[0]['name'] === "Суставная гимнастика", "Наименование программы некорректно");
     client.assert(response.body[0]['duration'] === "1 час", "Длительность программы некорректен");
     client.assert(response.body[0]['discount'] === "Не требует подготовки", "Уровень подготовки программы некорректен");
 });
 %}

### 4 Клиент смотрит окончание абонемента
GET http://localhost:8080/pass?pass_id=3

> {%
 client.test("Клиент имеет возможность отслеживать срок окончания действия своего абонемента", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['pass_id'] === 3, "id абонемента некорректен");
     client.assert(response.body[0]['duration'] === "06.05.2021 - 06.05.2023", "Срок действия абонемента некорректен");
     client.assert(response.body[0]['customer_id'] === 3, "id клиента некорректна");
 });
 %}


### 5 Менеджер может узнать общую стоимость покупаемых клиентом программ
GET http://localhost:8080/purchased_items?customer_id=1

> {%
 client.test("Менеджер может узнать общую стоимость покупаемых клиентом программ", function (){
     client.assert(response.status === 200, "Ожидается код '200'. Был получен код '" + response.status + "'.");
     client.assert(response.contentType.mimeType === "application/json", "Ожидаю application/type. Фактически: " +
     response.contentType.mimeType);
     client.assert(response.body.hasOwnProperty("length") && response.body.length === 1, "В ответе есть один элемент");
     client.assert(response.body[0]['customer_id'] === 1, "id клиента некорректен");
     client.assert(response.body[0]['full_name'] === "Кузнецова Маргарита Александровна", "ФИО клиента некорректно");
     client.assert(response.body[0]['sex'] === "ж", "Пол клиента некорректен");
     client.assert(response.body[0]['birthdate'] === "15.11.1990", "День рождения клиента некорректен");
     client.assert(response.body[0]['phone'] === "+79503215247", "Телефон клиента некорректен");
     client.assert(response.body[0]['passport'] === "22 15 215846", "Паспорт клиента некорректен");
     client.assert(response.body[0]['purchased_items'] !== undefined, "Нет данных о клиенте");
     client.assert(response.body[0]['purchased_items']['purchased_item_id'] === 1, "id преобретённого товара некорректен");
     client.assert(response.body[0]['purchased_items']['pass_id'] === 1, "id аьонемента некорректен");
     client.assert(response.body[0]['purchased_items']['id_programme'] === 1, "id программы некорректен");
     client.assert(response.body[0]['purchased_items']['price'] === 8500, "Цена программы некорректна");
 });
 %}

